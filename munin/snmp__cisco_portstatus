#!/usr/bin/perl -w
# -*- perl -*-

=head1 NAME

snmp__cisco_portstatus - Munin plugin to monitor port status of cisco switch

=head1 CONFIGURATION

The following configuration variables are used

 host      - SNMP host to contact (default taken from link name)
 port      - SNMP port to use (default 161)
 community - SNMP community string to use (default "public")

=head1 LICENSE

MPL/GPL

=cut

use strict;
use Munin::Plugin::SNMP;

# oid
my $oidBase   = '1.3.6.1.2.1.2.2.1';
my $oidv2Base = '1.3.6.1.2.1.31.1.1.1';

if (defined $ARGV[0] and $ARGV[0] eq "snmpconf")
{
    print "require $oidBase [2,5,7,8]\n";
    print "require $oidv2Base [18]\n";
    exit 0;
}

my $session = Munin::Plugin::SNMP->session();
my (%info, %infov2, $cid);
my $oidCols = {
                2 => 'name',
                3 => 'type',
                5 => 'speed',
                7 => 'admstatus',
                8 => 'operstatus',
};
my $oidv2Cols = {
               18 => 'alias',
};

if (defined $ARGV[0] and $ARGV[0] eq "config")
{
    my ($host) = Munin::Plugin::SNMP->config_session();
    print "host_name $host\n";

    my $name;
    my %ifhash;
    if (&get_multi_composite($session, $oidBase, $oidCols, \%info) != 0) {
        &get_multi_composite($session, $oidv2Base, $oidv2Cols, \%infov2);
        foreach (keys %info) {
            if (defined($info{$_}->{name}) &&
                (defined($info{$_}->{type}) && $info{$_}->{type} == 6)) {
                if (defined($infov2{$_}) && defined($infov2{$_}->{alias}) &&
                    ($infov2{$_} ne '')) {
                    $ifhash{$_} = $infov2{$_}->{alias} . " (if $_)";
                } else {
                    $ifhash{$_} = $info{$_}->{name};
                }
            }
        }
        print "multigraph if_speed\n";
        print "graph_title Cisco port link speed\n";
        print "graph_category network\n";
        print "graph_vlabel Mbps\n";
        print "graph_info Link speed per port\n";
        print "graph_args --base 1000 --logarithmic\n";
        foreach (sort keys %ifhash) {
            print "i${_}.label $ifhash{$_}\n";
            print "i${_}.type GAUGE\n";
        }
        print "multigraph if_admstat\n";
        print "graph_title Cisco port admin status\n";
        print "graph_category network\n";
        print "graph_vlabel ID\n";
        print "graph_info Admin status per port: 1) up 2) down 3) testing 4) unknown 5) dormant 6) not present 7) L1 down\n";
        print "graph_args --base 1000 -l 0\n";
        foreach (sort keys %ifhash) {
            print "i${_}.label $ifhash{$_}\n";
            print "i${_}.type GAUGE\n";
        }
        print "multigraph if_operstat\n";
        print "graph_title Cisco port operational status\n";
        print "graph_category network\n";
        print "graph_vlabel ID\n";
        print "graph_info Operational status per port: 1) up 2) down 3) testing 4) unknown 5) dormant 6) not present 7) L1 down\n";
        print "graph_args --base 1000 -l 0\n";
        foreach (sort keys %ifhash) {
            print "i${_}.label $ifhash{$_}\n";
            print "i${_}.type GAUGE\n";
        }
    }
    exit 0;
}

if (&get_multi_composite($session, $oidBase, $oidCols, \%info) != 0) {
    my @iflist;
    foreach (keys %info) {
        if (defined($info{$_}->{name}) &&
            (defined($info{$_}->{type}) && $info{$_}->{type} == 6)) {
            push(@iflist, $_);
        }
    }
    print "multigraph if_speed\n";
    foreach (@iflist) {
        if ($info{$_}->{operstatus} == 1) {
            print "i${_}.value " . ($info{$_}->{speed}/1000000) . "\n";
        } else {
            print "i${_}.value 0\n";
        }
    }
    print "multigraph if_admstat\n";
    foreach (@iflist) {
        print "i${_}.value $info{$_}->{admstatus}\n";
    }
    print "multigraph if_operstat\n";
    foreach (@iflist) {
        print "i${_}.value $info{$_}->{operstatus}\n";
    }
}


exit;

sub get_multi_composite {
    my ($session, $oidBase, $oidCols, $snmpinfo) = @_;
    my $ret = $session->get_hash(
            -baseoid => $oidBase,
            -cols    => $oidCols);
    if (! defined($ret)) {return 0; }
    my ($ckey, $corig);
    foreach $corig (keys %$ret) {
        $corig =~ /(\d+)/;
        $ckey = $1;
        if (! defined($snmpinfo->{$ckey})) {$snmpinfo->{$ckey} = {}; }
        foreach (keys %{$ret->{$corig}}) {
            $snmpinfo->{$ckey}->{$_} = $ret->{$corig}->{$_};
        }
    }
    return 1;
}


sub get_numeric {
    my ($val) = @_;
    if ($val =~ /^([0-9\.]+)/) {return $1; }
    return undef;
}

sub get_single {
    my ($session, $oid) = @_;
    my $res = $session->get_request($oid);
    my $val = undef;
    if ($session->error_status) {return undef; }
    # treat only if value returned, unless not touch $val
    if (defined($res->{$oid})) {
        if ($res->{$oid} ne 'noSuchObject') {$val = $res->{$oid}; }
    } elsif (defined($res->{$oid . '.0'})) {
        if ($res->{$oid . '.0'} ne 'noSuchObject') {$val = $res->{$oid . '.0'}; }
    } else {
    }
    return $val;
}

